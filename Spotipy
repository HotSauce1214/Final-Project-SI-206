from venv import create
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import sqlite3
import json
import requests
import matplotlib
import os
import unittest
import csv
import sys
import pprint
import matplotlib.pyplot as plt
from textwrap import wrap


##STEP 1: go to Spotify and receive client id, client secret, and redirect uri to set environment variables

    # set SPOTIPY_CLIENT_ID='029fecc3e8c64352b19bbdfb850eb5cd'
    # set SPOTIPY_CLIENT_SECRET='7f38c24d9b144f059df3e8dc5906edae'
    # set SPOTIPY_REDIRECT_URI='https://open.spotify.com/playlist/37i9dQZEVXbNG2KDcFcKOF'

#STEP 2: Run following commands above to create local environment in terminal

def setUpDatabase(db_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path+'/'+db_name)
    cur = conn.cursor()
    return cur, conn

def get_artist_top_track_and_popularity(request_uri):
     # popularity_uri = 

    caesar_uri = 'spotify:artist:'+request_uri
    spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())

    results = spotify.artist_top_tracks(caesar_uri, country = "US")
    tracks = results['tracks']    
    name = []
    popularity = []
    
    for track in tracks:
        name_track = track['name']
        name_popularity = track['popularity']
        name.append((name_track, name_popularity))
    
    return name


def create_database(data, cur, conn):
    cur.execute("CREATE TABLE IF NOT EXISTS top_tracks (track_id INTEGER PRIMARY KEY, name TEXT, popularity INTEGER)")
    conn.commit()

    cur.execute("SELECT MAX(track_id) FROM top_tracks")
    curr_id = cur.fetchone()[0]
    
    if curr_id == None:
        curr_id = 0

    for i in range(len(data)):
        track_id = curr_id + i + 1
        name = data[i][0]
        popularity = data[i][1]
    
        cur.execute("""
                INSERT OR IGNORE INTO top_tracks (track_id, name, popularity) VALUES (?,?,?)
                """,
                (track_id, name, popularity)
            )
        conn.commit()


def barChart_1(cur):
    fig = plt.figure(figsize=(10,4))
    ax_1 = fig.add_subplot()   
    l_1 = dict()
   
    cur.execute('SELECT name, popularity FROM top_tracks ORDER BY popularity DESC LIMIT 10')
    cur_1 = cur.fetchall()
    for row in cur_1:
        l_1[row[0]]=row[1]
    name = []
    popularity=[]
    for key,value in l_1.items():
        name.append(key)
        popularity.append(value)
    name = ['\n'.join(wrap(x, 16)) for x in name]
    ax_1.bar(name,popularity,align='center', alpha=0.5, color='red')
    ax_1.set(xlabel='Track Name', ylabel='Popularity Rating (out of 100)',
    title='Artist Track versus Spotify Popularity Rating')
    ax_1.set_xticklabels(name,FontSize='9')
    plt.show()

def get_artist_name(request_uri):
    caesar_uri = 'spotify:artist:'+request_uri
    spotify = spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials())

    results = spotify.artist(caesar_uri)

    return results['name']

def compute_popularity_rating(data):
    total = 0

    for i in range(len(data)):
        total += data[i][1]
    return float(total / 10)


def create_computation_database(average, name, cur, conn):
    cur.execute("CREATE TABLE IF NOT EXISTS average_popularity (id INTEGER PRIMARY KEY, name TEXT, average_popularity FLOAT)")
    conn.commit()


    cur.execute("SELECT MAX(id) FROM average_popularity")
    curr_id = cur.fetchone()[0]
    
    if curr_id == None:
        curr_id = 0
    
    id = curr_id + 1
    name_artist = name
    average_popularity = average
    
    cur.execute("""
            INSERT OR IGNORE INTO average_popularity (id, name, average_popularity) VALUES (?,?,?)
            """,
            (id, name_artist, average_popularity)
        )
    conn.commit()

def main():
    
    cur, conn = setUpDatabase('Tracks.db')

    artist_uri = '4V8LLVI7PbaPR0K2TGSxFF'
    
    data = get_artist_top_track_and_popularity(artist_uri)

    create_database(data, cur, conn)

    average_popularity = compute_popularity_rating(data)

    name = get_artist_name(artist_uri)

    create_computation_database(average_popularity, name, cur, conn)

    barChart_1(cur)

if __name__ == "__main__":
    main()
    unittest.main(verbosity=2)